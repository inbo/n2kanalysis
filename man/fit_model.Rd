% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_model.R, R/fit_model_character.R,
%   R/fit_model_n2k_aggregate.R, R/fit_model_n2k_composite.R,
%   R/fit_model_n2k_hurdle_imputed.R, R/fit_model_n2k_inla.R,
%   R/fit_model_n2k_inla_comparison.R, R/fit_model_n2k_manifest.R,
%   R/fit_model_n2k_model_imputed.R, R/fit_model_s3_object.R
\docType{methods}
\name{fit_model}
\alias{fit_model}
\alias{fit_model,character-method}
\alias{fit_model,n2kAggregate-method}
\alias{fit_model,n2kComposite-method}
\alias{fit_model,n2kHurdleImputed-method}
\alias{fit_model,n2kInla-method}
\alias{fit_model,n2kInlaComparison-method}
\alias{fit_model,n2kManifest-method}
\alias{fit_model,n2kModelImputed-method}
\alias{fit_model,s3_object-method}
\title{Fit an \code{n2kModel} object}
\usage{
fit_model(x, ...)

\S4method{fit_model}{character}(
  x,
  base,
  project,
  status = c("new", "waiting"),
  verbose = TRUE,
  ...,
  bucket
)

\S4method{fit_model}{n2kAggregate}(x, ...)

\S4method{fit_model}{n2kComposite}(x, base, project, status = "new", ...)

\S4method{fit_model}{n2kHurdleImputed}(x, base, project, status = c("new", "waiting"), ...)

\S4method{fit_model}{n2kInla}(
  x,
  status = "new",
  ...,
  timeout = NULL,
  seed = get_seed(x),
  num_threads = NULL,
  parallel_configs = TRUE
)

\S4method{fit_model}{n2kInlaComparison}(x, base, project, status = "new", verbose = TRUE, ...)

\S4method{fit_model}{n2kManifest}(
  x,
  base,
  project,
  status = c("new", "waiting"),
  verbose = TRUE,
  ...,
  local,
  bash = FALSE
)

\S4method{fit_model}{n2kModelImputed}(x, ...)

\S4method{fit_model}{s3_object}(x, ...)
}
\arguments{
\item{x}{the \code{n2kModel}}

\item{...}{other arguments.
See details}

\item{base}{The root of a project. Can be either a directory on a file system
or an AWS S3 bucket object.
Extracted from \code{bucket} or \code{x} when missing.}

\item{project}{The subdirectory of the project. Is relative the \code{base}.
Extracted from \code{x} when missing.}

\item{status}{A vector with status levels naming the levels which should be
calculated.
Defaults to \code{"new"}.}

\item{verbose}{A logical indicating if the function should display the name
of the file and the status.
Defaults to \code{TRUE}.}

\item{bucket}{The name of the AWS S3 bucket.
Only used when \code{base} is missing.}

\item{timeout}{the optional number of second until the model will time out}

\item{seed}{See the same argument in \code{\link[INLA:qsample]{INLA::inla.qsample()}} for further
information.
In order to produce reproducible results, you ALSO need to make sure the RNG
in R is in the same state, see the example in
\code{\link[INLA:posterior.sample]{INLA::inla.posterior.sample()}}.
When seed is non-zero, \code{num_threads} is forced to \code{"1:1"} and
\code{parallel_configs} is set to \code{FALSE}, since parallel sampling would not
produce a reproducible sequence of pseudo-random numbers.}

\item{num_threads}{The number of threads to use in the format \code{"A:B"}
defining the number threads in the outer (\code{A}) and inner (\code{B}) layer for
nested parallelism.
\verb{A "0"} will be replaced intelligently.
\code{seed != 0} requires serial computations.}

\item{parallel_configs}{Logical.
If TRUE and not on Windows, then try to run each configuration in parallel
(not Windows) using \code{A} threads (see \code{num_threads}), where each of them is
using \code{B:0} threads.}

\item{local}{A local folder into which objects from an AWS S3 bucket are
downloaded.}

\item{bash}{Use the \code{littler} package do run the models in separate sessions.
This will release the memory.}
}
\description{
Fit an \code{n2kModel} object
}
\details{
\itemize{
\item \code{status}: A vector with status levels naming the levels which should be
recalculated.
Defaults to \code{c("new", "waiting")}.
\item \code{verbose}: A logical indicating if the function should display the name of
the file and the status.
Defaults to \code{TRUE}.
}
}
